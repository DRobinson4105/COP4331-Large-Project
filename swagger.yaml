swagger: '2.0'
info:
  title: NomNomNetwork App
  description: This is the API documentation for the Glasses8P App, including user signup/login, profile, recipe, and tag management.
  version: 1.0.0
  contact:
    email: drobinson@ucf.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /user/signup:
    post:
      tags:
      - account
      summary: Signs up for an account for the NomNom App
      operationId: doSignUp
      description: Signs up for an account for the NomNom App
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: signUpItem
        description: signUp
        schema:
          $ref: '#/definitions/SignUp'
      responses:
        200:
          description: OK
        204:
          description: No Content
        400:
          description: Invalid Input
        404:
          description: URL Not Found
        409:
          description: Account with provided username or email already exists
        500:
          description: Server Error
  
  /user/login:
    post:
      tags:
      - account
      summary: Checks the inputted user information to see if it matches an account in the system and returns ID
      operationId: doLogin
      description: Matches input with an existing account and returns ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: loginItem
        description: login
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: Login Successful
        204:
          description: No Content
        400:
          description: Invalid Input
        404:
          description: URL Not Found
        500:
          description: Server Error

  /recipe:
    post:
      tags:
      - recipe
      summary: Take in recipeId and return its details.
      operationId: doRecipe
      description: Take in recipeId and return its details.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: recipeItem
        description: Take in recipeId and return its details.
        schema:
          $ref: '#/definitions/Recipe'
      responses:
        200:
          description: Found Recipe
        204:
          description: No Content
        400:
          description: Invalid Input (Missing Inputs)
        404:
          description: URL Not Found
        409:
          description: Recipe Not Found Error
        500:
          description: Server Error

  /recipe/search:
    post:
      tags:
      - recipe
      summary: Takes in name search &OR filters and returns list of recipes
      operationId: doSearchRecipe
      description: Takes in name search &OR filters and returns list of recipes
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: SearchRecipes
        description: Takes in name search &OR filters and returns list of recipes
        schema:
          $ref: '#/definitions/SearchRecipes'
      responses:
        200:
          description: Found & Returned list of recipes
        204:
          description: No Content
        400:
          description: Invalid Input (Missing Inputs)
        404:
          description: URL Not Found
        500:
          description: Server Error
      

  /recipe/create:
    post:
      tags:
      - recipe
      summary: Creates a recipe using (name, desc, image, macroTrack, authorId, instructions, ingredients, tagId) and returns the recipeId.
      operationId: doCreateRecipe
      description: Creates a recipe using inputted info and returns the recipeId.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: createRecipeItem
        description: createRecipe
        schema:
          $ref: '#/definitions/CreateRecipe'
      responses:
        200:
          description: Created Recipe
        204:
          description: No Content
        400:
          description: Invalid Input (Missing Inputs)
        404:
          description: URL Not Found
        500:
          description: Server Error

definitions:
  Login:
    type: object
    required:
    - username
    - password
    - email
    - googleId
    properties:
      username:
        type: string
        example: "LebronJ"
      password:
        type: string
        example: "Cleveland"
      email:
        type: string
        example: "nba@nba.com"
      googleId:
        type: string
        example: "67252a9906b07a7478339fe9"
  
  SignUp:
    type: object
    required:
    - username
    - displayName
    - password
    - email
    - googleId
    properties:
      username:
        type: string
        example: "LebronJ"
      displayName:
        type: string
        example: "KingJames"
      password:
        type: string
        example: "Cleveland"
      email:
        type: string
        example: "nba@nba.com"
      googleId:
        type: string
        example: "67252a9906b07a7478339fe9"
  
  Recipe:
    type: object
    required:
    - id
    properties:
      recipeId:
        type: string
        example: "67252a9906b07a7478339fe9"

  SearchRecipes:
    type: object
    required:
    - name
    - filters
    properties:
      name:
        type: string
        example: "Green"
      filters:
        type: array
        items:
          type: string
        example: ["6724e84caf5041d082f98234"]
  
  CreateRecipe:
    type: object
    required:
    - name
    - desc
    - image
    - macroTrack
    - authorId
    - instructions
    - ingredients
    - tagId
    properties:
      name:
        type: string
        example: "Green Eggs"
      desc:
        type: string
        example: "Cat & The Hat"
      image:
        type: string
        example: "L1VzZXJzL2ZyZWRyaWNrYm91bG91dGUvRG9jdW1lbnRzL0dpdEh1Yi9DT1A0MzMxLUxhcmdlLVByb2plY3Qvc3JjL19fdGVzdHNfXy9fdGVzdFBob3RvLmpwZw=="
      macroTrack: 
        type: array
        items:
          type: number
        example: [120.0, 120.0, 120.0, 120.0]
      authorId:
        type: string
        example: "67252a9906b07a7478339fe9"
      instructions:
        type: array
        items: 
          type: string
        example: ["Cooked the food"]
      ingredients:
        type: array
        items:
          type: string
        example: ["Eggs"]
      tagId: 
        type: array
        items:
          type: string
        example: ["67252a9906b07a7478339fe9"]

host: nomnom.network:3000
basePath: /
schemes:
- http