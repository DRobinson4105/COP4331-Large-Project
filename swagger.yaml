swagger: '2.0'
info:
  title: NomNomNetwork App
  description: This is the API documentation for the Glasses8P App, including user signup/login, profile, recipe, and tag management.
  version: 1.0.0
  contact:
    email: drobinson@ucf.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /user/signup:
    post:
      tags:
      - account
      summary: Signs up for an account for the NomNom App
      operationId: doSignUp
      description: Signs up for an account for the NomNom App
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: signUpItem
        description: signUp
        schema:
          $ref: '#/definitions/SignUp'
      responses:
        200:
          description: OK
        204:
          description: No Content
        400:
          description: Invalid Input
        404:
          description: URL Not Found
        409:
          description: Account with provided username or email already exists
        500:
          description: Server Error
  
  /user/login:
    post:
      tags:
      - account
      summary: Checks the inputted user information to see if it matches an account in the system and returns ID
      operationId: doLogin
      description: Matches input with an existing account and returns ID
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: loginItem
        description: login
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: Login Successful
        204:
          description: No Content
        400:
          description: Invalid Input
        404:
          description: URL Not Found
        500:
          description: Server Error

  /user/get:
    post:
      tags:
      - account
      summary: Gets most of the information of the account whose id is entered and returns the information
      operationId: doGetProfile
      description: Matches input with existing account and returns all information about it
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: getProfileItem
        description: getProfile
        schema:
          $ref: '#/definitions/GetProfile'
      responses:
        200:
          description: Found and returned account object containing all of the account's information
        204:
          description: No content
        400:
          description: Invalid input (missing id)
        404:
          description: URL not found
        409:
          description: Account not found error
        500:
          description: Server Error

  /user/update:
    post:
      tags:
      - account
      summary: Can update most of the information of an account whose ID is given
      operationId: doUpdateProfile
      description: Matches input with existing account and alters its information
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: updateProfileItem
        description: updateProfile
        schema:
          $ref: '#/definitions/UpdateProfile'
      responses:
        200:
          description: Found and updated the account object whose ID was given with the other given information
        204:
          description: No content
        400:
          description: Invalid input (missing id or other inputs were not strings)
        404:
          description: URL not found
        409:
          description: Account not found error
        500:
          description: Server Error

  /user/delete:
    post:
      tags:
      - account
      summary: Deletes the account whose ID was given
      operationId: doDeleteProfile
      description: Matches input with existing account and deletes it
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: deleteProfileItem
        description: deleteProfile
        schema:
          $ref: '#/definitions/DeleteProfile'
      responses:
        200:
          description: Found and deleted the account whose ID was recieved
        204:
          description: No content
        400:
          description: Invalid input (missing id)
        404:
          description: URL not found
        409:
          description: Account not found error
        500:
          description: Server Error

  /recipe/get:
    post:
      tags:
      - recipe
      summary: Take in recipeId and return its details.
      operationId: doGetRecipe
      description: Take in recipeId and return its details.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: getRecipeItem
        description: Take in recipeId and return its details.
        schema:
          $ref: '#/definitions/GetRecipe'
      responses:
        200:
          description: Found Recipe
        204:
          description: No Content
        400:
          description: Invalid Input (Missing Inputs)
        404:
          description: URL Not Found
        409:
          description: Recipe Not Found Error
        500:
          description: Server Error

  /recipe/search:
    post:
      tags:
      - recipe
      summary: Takes in name search &OR filters and returns list of recipes
      operationId: doSearchRecipe
      description: Takes in name search &OR filters and returns list of recipes
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: SearchRecipes
        description: Takes in name search &OR filters and returns list of recipes
        schema:
          $ref: '#/definitions/SearchRecipes'
      responses:
        200:
          description: Found & Returned list of recipes
        204:
          description: No Content
        400:
          description: Invalid Input (Missing Inputs)
        404:
          description: URL Not Found
        500:
          description: Server Error

  /recipe/create:
    post:
      tags:
      - recipe
      summary: Creates a recipe using (name, desc, image, macros, authorId, instructions, ingredients, tagId) and returns the recipeId.
      operationId: doCreateRecipe
      description: Creates a recipe using inputted info and returns the recipeId.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: createRecipeItem
        description: createRecipe
        schema:
          $ref: '#/definitions/CreateRecipe'
      responses:
        200:
          description: Created Recipe
        204:
          description: No Content
        400:
          description: Invalid Input (Missing Inputs)
        404:
          description: URL Not Found
        500:
          description: Server Error

  /recipe/update:
    post:
      tags:
      - recipe
      summary: Updates the recipe given an id
      operationId: doUpdateRecipe
      description: Matches input with existing recipe and updates it
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: updateRecipeItem
        description: updateRecipe
        schema:
          $ref: '#/definitions/UpdateRecipe'
      responses:
        200:
          description: Found and updated the recipe whose ID was recieved
        204:
          description: No content
        400:
          description: Invalid input (missing id)
        404:
          description: URL not found
        409:
          description: Recipe not found error
        500:
          description: Server Error

  /recipe/delete:
    post:
      tags:
      - recipe
      summary: Deletes the recipe given an id
      operationId: doDeleteRecipe
      description: Matches input with existing recipe and deletes it
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: deleteRecipeItem
        description: deleteRecipe
        schema:
          $ref: '#/definitions/DeleteRecipe'
      responses:
        200:
          description: Found and deleted the recipe whose ID was recieved
        204:
          description: No content
        400:
          description: Invalid input (missing id)
        404:
          description: URL not found
        409:
          description: Recipe not found error
        500:
          description: Server Error
  
  /tag/create:
    post:
      tags:
      - tag
      summary: Creates a tag using name and returns its id.
      operationId: doCreateTag
      description: Creates a tag using name and returns its id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: createTagItem
        description: createTag
        schema:
          $ref: '#/definitions/CreateTag'
      responses:
        200:
          description: Created Tag
        204:
          description: No Content
        400:
          description: Invalid Input (Missing Inputs)
        404:
          description: URL Not Found
        500:
          description: Server Error

definitions:
  Login:
    type: object
    required:
    - username
    - password
    - email
    - googleId
    properties:
      username:
        type: string
        example: "LebronJ"
      password:
        type: string
        example: "Cleveland"
      email:
        type: string
        example: "nba@nba.com"
      googleId:
        type: string
        example: "67252a9906b07a7478339fe9"
  
  SignUp:
    type: object
    required:
    - username
    - displayName
    - password
    - email
    - googleId
    properties:
      username:
        type: string
        example: "LebronJ"
      displayName:
        type: string
        example: "KingJames"
      password:
        type: string
        example: "Cleveland"
      email:
        type: string
        example: "nba@nba.com"
      googleId:
        type: string
        example: "67252a9906b07a7478339fe9"

  GetProfile:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        example: "67257d85a43154e1fb7cd14b"

  UpdateProfile:
    type: object
    required:
    - id
    - username
    - name
    - image
    - desc
    - password
    properties:
      id:
        type: string
        example: "67257d85a43154e1fb7cd14b"
      username:
        type: string
        example: "biguser"
      name:
        type: string
        example: "Billy Jobs"
      image:
        type: string
        example: "L1VzZXJzL2ZyZWRyaWNrYm91bG91dGUvRG9jdW1lbnRzL0dpdEh1Yi9DT1A0MzMxLUxhcmdlLVByb2plY3Qvc3JjL19fdGVzdHNfXy9fdGVzdFBob3RvLmpwZw=="
      desc:
        type: string
        example: "Guy who eats a lot"
      password:
        type: string
        example: "secretpassword"

  DeleteProfile:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        example: "67257d85a43154e1fb7cd14b"
  
  GetRecipe:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        example: "67252a9906b07a7478339fe9"

  SearchRecipes:
    type: object
    required:
    - name
    - minCalories
    - maxCalories
    - minFat
    - maxFat
    - minCarbs
    - maxCarbs
    - minProtein
    - maxProtein
    - tagId
    properties:
      name:
        type: string
        example: "Green"
      minCalories:
        type: number
        example: 100
      maxCalories:
        type: number
        example: 1000
      minFat:
        type: number
        example: 100
      maxFat:
        type: number
        example: 1000
      minCarbs:
        type: number
        example: 100
      maxCarbs:
        type: number
        example: 1000
      minProtein:
        type: number
        example: 100
      maxProtein:
        type: number
        example: 1000
      tagId:
        type: array
        items:
          type: string
          example: "67252a9906b07a7478339fe9"
      firstidx:
        type: number
        example: 0
      lastidx:
        type: number
        example: 10
  
  CreateRecipe:
    type: object
    required:
    - name
    - desc
     - authorId
    - calories
    - fat
    - carbs
    - protein
    - instructions
    - ingredients
    - tagId
    properties:
      name:
        type: string
        example: "Green Eggs"
      desc:
        type: string
        example: "Cat & The Hat"
      image:
        type: string
        example: "L1VzZXJzL2ZyZWRyaWNrYm91bG91dGUvRG9jdW1lbnRzL0dpdEh1Yi9DT1A0MzMxLUxhcmdlLVByb2plY3Qvc3JjL19fdGVzdHNfXy9fdGVzdFBob3RvLmpwZw=="
      calories: 
        type: number
        example: 200.0
      fat: 
        type: number
        example: 200.0
      carbs: 
        type: number
        example: 200.0
      protein: 
        type: number
        example: 200.0
      authorId:
        type: string
        example: "67252a9906b07a7478339fe9"
      instructions:
        type: array
        items: 
          type: string
        example: ["Cooked the food"]
      ingredients:
        type: array
        items:
          type: string
        example: ["Eggs"]
      tagId: 
        type: array
        items:
          type: string
        example: ["67252a9906b07a7478339fe9"]

  DeleteRecipe:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        example: "6723f006ba10f4fd6307a8e9"
  
  UpdateRecipe:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        example: "6723f006ba10f4fd6307a8e9"
      name:
        type: string
        example: "_testUpdated"
      image:
        type: string
        example: "L1VzZXJzL2ZyZWRyaWNrYm91bG91dGUvRG9jdW1lbnRzL0dpdEh1Yi9DT1A0MzMxLUxhcmdlLVByb2plY3Qvc3JjL19fdGVzdHNfXy9fdGVzdFBob3RvLmpwZw=="
      calories:
        type: number
        example: 10
      fat:
        type: number
        example: 10
      carbs:
        type: number
        example: 10
      protein:
        type: number
        example: 10
      instructions:
        type: array
        items:
          type: string
        example: ["Sample Instructions"]
      ingredients:
        type: array
        items:
          type: string
        example: ["Sample Ingredients"]
      tagId:
        type: array
        items:
          type: string
        example: ["67252a9906b07a7478339fe9"]

  CreateTag:
    type: object
    required:
    - name
    properties:
      name:
        type: string
        example: "_test"
      color:
        type: string
        example: "green"

host: nomnom.network:3000
basePath: /api/
schemes:
- http